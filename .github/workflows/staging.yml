# .github/workflows/staging.yml

name: Github Action bandtent-preview
on:
  push:
    branches: [preview]
jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    env:
      S3_UPLOAD_KEY: ${{ secrets.S3_UPLOAD_KEY }}
      S3_UPLOAD_SECRET: ${{ secrets.S3_UPLOAD_SECRET }}
      S3_UPLOAD_BUCKET: ${{ secrets.S3_UPLOAD_BUCKET }}
      S3_UPLOAD_REGION: ${{ secrets.S3_UPLOAD_REGION }}
      DATABASE_URL_WITH_SCHEMA: ${{ secrets.DATABASE_URL_WITH_SCHEMA }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      SHADOW_DATABASE_URL: ${{ secrets.SHADOW_DATABASE_URL }}
      DATABASE_LOCAL_URL: ${{ secrets.DATABASE_LOCAL_URL }}
      EMAIL_SERVER_USER: ${{ secrets.EMAIL_SERVER_USER }}
      EMAIL_SERVER_PASSWORD: ${{ secrets.EMAIL_SERVER_PASSWORD }}
      EMAIL_SERVER_HOST: ${{ secrets.EMAIL_SERVER_HOST }}
      EMAIL_SERVER_PORT: ${{ secrets.EMAIL_SERVER_PORT }}
      EMAIL_FROM: ${{ secrets.EMAIL_FROM }}
      AUTH_GITHUB_ID: ${{ secrets.AUTH_GITHUB_ID }}
      AUTH_GITHUB_SECRET: ${{ secrets.AUTH_GITHUB_SECRET }}
      GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
      GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
      NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
      NEXTAUTH_URL_INTERNAL: ${{ secrets.NEXTAUTH_URL_INTERNAL }}
      SECRET: ${{ secrets.SECRET }}
      PRISMA_QUERY_ENGINE_BINARY: ${{ secrets.PRISMA_QUERY_ENGINE_BINARY }}

    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS Credentials

        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - uses: canastro/copy-file-action@master
        with:
          source: 'serverless-staging.yml'
          target: 'serverless.yml'

      - uses: actions/setup-node@v2-beta
        with:
          node-version: '16.14'

      - name: environment variables
        run:
          - echo "S3_UPLOAD_KEY=$S3_UPLOAD_KEY" >> .env
          - echo "S3_UPLOAD_SECRET=$S3_UPLOAD_SECRET" >> .env
          - echo "S3_UPLOAD_BUCKET=$S3_UPLOAD_BUCKET" >> .env
          - echo "S3_UPLOAD_REGION=$S3_UPLOAD_REGION" >> .env
          - echo "DATABASE_URL_WITH_SCHEMA=$DATABASE_URL_WITH_SCHEMA" >> .env
          - echo "DATABASE_URL=$DATABASE_URL" >> .env
          - echo "SHADOW_DATABASE_URL=$SHADOW_DATABASE_URL" >> .env
          - echo "EMAIL_SERVER_USER=$EMAIL_SERVER_USER" >> .env
          - echo "EMAIL_SERVER_PASSWORD=$EMAIL_SERVER_PASSWORD" >> .env
          - echo "EMAIL_SERVER_HOST=$EMAIL_SERVER_HOST" >> .env
          - echo "EMAIL_SERVER_PORT=$EMAIL_SERVER_PORT" >> .env
          - echo "EMAIL_FROM=$EMAIL_FROM" >> .env
          - echo "AUTH_GITHUB_ID=$AUTH_GITHUB_ID" >> .env
          - echo "AUTH_GITHUB_SECRET=$AUTH_GITHUB_SECRET" >> .env
          - echo "GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID" >> .env
          - echo "GOOGLE_CLIENT_SECRET=$GOOGLE_CLIENT_SECRET" >> .env
          - echo "NEXTAUTH_URL=$NEXTAUTH_URL" >> .env
          - echo "EMAIL_FROM=$EMAIL_FROM" >> .env
          - echo "NEXTAUTH_URL_INTERNAL=$NEXTAUTH_URL_INTERNAL" >> .env
          - echo "SECRET=$SECRET" >> .env
          - echo "PRISMA_QUERY_ENGINE_BINARY=$PRISMA_QUERY_ENGINE_BINARY" >> .env

      - name: Install dependencies
        run: yarn install

      # - name: prisma schema post installation
      #   run: yarn prisma:prep

      # - name: Run tests
      #   run: yarn test:jest && yarn test:e2e:run

      - name: Serverless AWS authentication
        run: npx serverless@2.72.2 --component=serverless-next config credentials --provider aws --key ${{ secrets.AWS_ACCESS_KEY_ID }} --secret ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Download `.serverless` state from S3
        run: aws s3 sync s3://bandtent-serverless-state-bucket/bandtent/staging/.serverless .serverless --delete

      - name: Deploy to AWS
        run: npx serverless@2.72.2

      - name: Upload `.serverless` state to S3
        run: aws s3 sync .serverless s3://bandtent-serverless-state-bucket/bandtent/staging/.serverless --delete
